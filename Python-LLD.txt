Python-LLD
Modules: collections of functions and variables
from imp import reload		--> used to reload modules multiple times. usually modules are loaded only once. 
reload(module_name)

Note: python modules are imported and cahed under __PYCACHE__ directory. This caching mechanism helps improve the startup time of Python programs by avoiding recompilation of source files every time they are imported.

dir(): list current module members. 
__builtins__, __name__,__package__,__doc__,__loader__,__cached__,__file__ these are predefined variables python interpreter added in every module. 
__dict__: shows instance variables 
__name__: Its special variable indicates whether code is getting executed directy as program or code is indirectly getting executed as module from other program. 

vi module1.py
def f1():
	print("The value of __name__",__name__)
f1()

mofule1.py --> The value of __name__:__main__


vi test.py
import module1
print("Tha value of __name__",__name__)
module1.f1()

test.py	--> The value of __name__:module1


random module: used to generate random values.
random(): generate values between 0 and 1 (excluding)
randint(start,end): generate int values between range (inclusive)
uniform(start,end): generate float values between range (exclusive)
randrange(start,stop,step): similar to range function but random
choice(list/tuple): select random from list or tuple


---------------------------------------------------OOP's concept-----------------------------------------------
class: acts as blueprint or template 
object: real time instantiation of class 
reference variable: remote variable point objects to perform operations

self: a reference variable used to point to object in the class. 
constructor(): __init__(self)
used to declare and initialize the instance variables. executed only once per object.  takes atleast one argument. 

3 types of variable:
1. Instance variable/object level variable: 
	declared using self. separate copy is created for each object. declared inside __init__()
2. Static variable/class level variable: 
	single copy is created for all objects of class. decalared inside class. 
3. Local variable/method variable: 
	declared and used inside methods or constructors. scope is limited to method. 

3 types of methods:
1. instance method/object related methods: method where we are using instance variables. pass self as argument to represent it as instance method. 
2. class method: use @classmethod (mandatory) decorator to make it class method. it takes any ref variable as argument to access class level variable. can be called directly with class name. no obj creation required. 
3. static method: use @staticmethod decorator to make it static method. use object or class name to call static function. 


class Student:
  cname = "ShantayyaSwami"		--> static variable
  def __init__(self,nam,rol):		--> instance method
	count = 0			--> local variable
	self.name = nam			--> instance variable
	self.roll = rol
	
  @classmethod				--> class method
  def display(cls):
	print("class variable is",cls.cname)

  @staticmethod
  def show():				--> static method
    print("this is from static method")

s1 = Student("Shantayya",100)
s1.display()
s1.show()


Note: del self.var or del object.var --> to delete instance variable, del classname.var --> to delete static var
getters and setters: used to get and set the data. Hiding data behind methods is called encapsulation and can be achieved using getters and setters. 
IDE generate these methods for us. 


----------------Inner class----------------
1. class defined inside another class. 
2. without existing one type of object if there is no existnace of another type of object then we should go for inner classes. (University-department)

class Person:
   def __init__(self):
  	self.name="Shantayya"
 	self.dob = self.DOB
   def display(self):
       print("Name:",self.name)
       self.dob.display()

   class DOB:
	def __init__(self):
	    self.dd = 04
 	    self.mm = 11
            self.yyyy = 1991

        def display(self):
             print(f"DOB:self.dd/self.mm.self.yyyy")

p = Person()
p.display()       


---------Garbage collection----------
gc is a process of deleting useless objects. 
import gc
gc.isenabled()	--> to check gc enabled or not
gc.disable()
gc.enable()


__del__(self):  destructor: Just before destroying object gc (invoked by python vm) always calls destructor for clean up activity. 


-----------------------------------Overloading-------------------------------
polymorphism: poly means many,  morph means form so one name with multiple forms called polymorphism.
operator overloading: refers to redefine the behavior of operators(such as '+','-','*','/' etc) for user-defined classes. operator overloading is achived using magic methods in python. 

magic methods (also known as dunder methods) are special methods with double underscore ('__') at the beginning and end of their names. They are called "magic" because they enable you to perform operations that might seem like built in feature of the languege but they are actually implemented by these special methods. 

each operator corresponds to specific magic method. like 
+ -----> __add__():	+= ---> __iadd__():	> ---> __gt__():
- -----> __sub__():	-= ---> __isub__():	>= --> __ge__():
* -----> __mul__():	*= ---> __imul__():	< ---> __lt__():
/ -----> __div__():	/= ---> __idiv__():	<= --> __le__():
% -----> __mod__():	%= ---> __imod__():	== --> __eq__():
** ----> __pow__():	**= --> __ipow__()	!= --> __ne__():

example-1:
class Book:
    def __init__(self,pages):
      self.pages = pages
    
    def __str__(self):
   	return 'The number of pages:'+str(self.pages)

    def __add__(self,other):
        return self.pages + other.pages

b1 = Book(100)
b2 = Book(800)
b3 = Book(1000)
print(b1+b2)

Note: When you use an operator with obj of a user-defined class, Python internally looks for the appropriate magic method associated with that operator in the class definition and invokes it.

whenever we are trying to print any obj ref then python calls __str__(): magic method internally. 
if we call print(b1+b2+b3) --> Type Error int(b1+b2) + obj(b3)   to fix this we can amend the __add__() method. like
    def __add__(self,other):
        total =  self.pages + other.pages
	b = Book(total)
        return b

print(b1+b2+b3) --> 1900


example-2: 
class Employee:
   def __init__(self,salary):
      self.salary = salary
  
   def __mul__(self,other):
       return self.salary * other.days

class Timesheet:
   def __init__(self,days):
	self.days = days
 
   def __mul__(self,other):
         return self.days * other.days

e = Employee(500)
t = Timesheet(30)
print(e*t)	---> call __mul__() from Employee class
print(t*e)	---> call __mul__() from Timesheet class

-----------------------------------------------------------Method overloading---------------------------------------
Python won't support method/constructor overloading. Since Python is dynamically typed, you can pass arguments of any type to a function or method, and the function or method implementation can handle those arguments accordingly.However, Python does support a form of method overloading through the use of default parameter values and variable-length argument lists (*args or **kwargs)
class MyClass:
    def my_method(self, a=None, b=None):
        if a is not None and b is not None:
            return a + b
        elif a is not None:
            return a
        else:
            return "No arguments provided"


------------------------------------------------------------------Inheritance-----------------------------------------------
Inheritance (Is-a-relationship): code reusability and extension of functinality 
single inheritance
multi-level inheritance 
hierarchycal inheritance (single parent-multiple child)
multiple inheritance (multiple parent single child) method resolution always based on order of parent

class P1:
   def m1(self):
      print("P1 method")

class P2:
   def m1(self):
       print("P2 method")
class C(P1,P2):pass

c=C()
c.m1()
 
Has a relationship (composition/aggregation):
composition vs aggregation:  
without existance of container obj(university) there may not be existance of contained obj(dept). and this strong association between container obj and contained obj called composition. 

without existance of container obj(dept) there can be existance of contained obj(professors). so this weak association between container and contained obj called aggregation. 

class Student:
   collageName = "Swami and Sons"
   def __init__(self,name):
      self.name = name

s = Student()
print(Student.collageName)
print(s.name)

Note: The relation between obj and instance varibale is composition(Strong association) and relation between obj and static variable is aggregation(weak association). 

-------------------------------Method Resolution Order Algo----------------------------------
class P:
  def m1(self):
     print("Parent")
class C(P):pass

c = C()
c.m1()
print(C.mro())		---> check method in Child class -----> if not found then method checked in Parent -----------> else search method in Obj class

Note: If head element of first list not present in tail part of any other list then consider that element in result and remove that element from all other list. 


--------------------------------------super()-------------------------------------
From child class call members of parent class we use super(). it helps us to call (immediate)parent class contructor or method for code reusability. 
class Person:
  def __init__(self,name,age):
      self.name = name
      self.age = age

  def display(self):
      print(f"Name:self.name and Age:self.age")
class Student(P):
      def __init__(self,name,age,roll,marks):
           super().__init__(name,age)
	   self.roll = roll
	   self.marks = marks
      def display(self):
           super.display()
	   print(f"Roll:self.roll and Marks:self.marks")
class Teacher(P):
    def __init__(self,name,age,salary,sub):
          super().__init__(name,age)
	  self.salary = salary
          self.sub = sub
    def display(self):
      super.display()
      print(f"Salary:self.salary and sub:self.sub")

s = Student("Shantayya",31,5594213,600)
t = Teacher("SK",47,86000,"CSC")
s.display()
t.display()


How to call perticular parent class method using super()?
1. parentclass.methodname(self)
2. super(classname,self).methodname()		---> here super of classname means classname parent method will get called 

Note: we can't use super to call parent class instance variable.

-------------------------------------File Handling------------------------------------
Temporary storage: List,Tuple, Map
Permanent storage: File, DB, BigData etc

Types of file:
1. Text file: store character data 
2. binary file: images, video, audio, zip files etc

open files:
f=open(filename,mode) and with open(filename,ode) as f:

file operations:
f.write(str)
f.writeline(list of lines)
f.read()
f.read(n)
f.readline()
f.readlines()

mode: 
r,w,a,r+,w+,a+

r --> open an existing file for read operation. if file not exist shows fileNotFound Error. default mode. 
f=open('abc.txt','r')

w --> open an existing file for write operation. if file not exist then create new one and if exist overwrite.
f=open('abc.txt','w')

a --> same as write operation however, append existing file. 
r+ --> read and then write
w+ --> write and then read + overwrite
a+ -->  append + read
x --> exclusive mode. same as write however file should not be available otherwise error. 

Note: Above modes are available for text files. for binary its rb,wb,ab,rb+,wb+,ab+
while both methods (open) serve the purpose of opening files, using with open(filename, mode) as f is generally preferred because it handles the file closing automatically and is considered more Pythonic

WAP to print number of lines,words and characters in file
import os
filename = 'abc.txt'
if os.path.isfile(filename):
    lcount = wcount = ccount = 0
    with open(filename, 'r') as f:
        for line in f:
            lcount += 1
            wcount += len(line.split())
            ccount += len(line)
    print("Number of lines:", lcount)
    print("Number of words:", wcount)
    print("Number of characters:", ccount)
else:
    print('File does not exist')


------------working with csv-----------------
import csv
with open('abc.csv','w') as f:
   w = csv.writer(f)
   w.writerow(['NAME,'ROLLNO','MARKS','ADDR'])
   while True:
      name = input('Enter the Student name')
      rollno = input('Enter roll no')
      marks  = input('Enter marks')
      addr = input('Enter address')
      w.writerow([name,rollno,marks,addr])
      operation = input('Do you want to record: Yes|No')
      if option.lower() == 'no':
        break

with open('abc.csv',r') as f:
r = csv.reader(f)
data = list(r)
for row in data:
  print(row[0],row[1],row[2],row[3],sep='\t')

---------working with zip file-----------------
Create ZipFile class object with name of zip file, mode, constant ZIP_DEFLATED (This constant represents we are creating zip file)
f=ZipFile('abc.zip','w',ZIP_DEFLATED)

once we create ZipFile object,we can add files by using write operaion. 
f.write(filename)

example: 
from zipfile import *
f=ZipFile('abc.zip','w',ZIP_DEFLATED)
f.write('abc.txt')
f.write('vcd.txt')

f=ZipFile('abc.zip','r',ZIP_STORED)			---> to read zipfile 
names = f.namelist()
for name in names:
  print("Name of file:",name)
  with open(name,'r') as f1:
  f1.read()



 

